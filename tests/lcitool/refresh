#!/usr/bin/env python3
#
# Re-generate container recipes
#
# This script uses the "lcitool" available from
#
#   https://gitlab.com/libvirt/libvirt-ci
#
# Copyright (c) 2020 Red Hat Inc.
#
# This work is licensed under the terms of the GNU GPL, version 2
# or (at your option) any later version. See the COPYING file in
# the top-level directory.

import sys
import os
import subprocess

from pathlib import Path

if len(sys.argv) != 1:
   print("syntax: %s" % sys.argv[0], file=sys.stderr)
   sys.exit(1)

self_dir = Path(__file__).parent
src_dir = self_dir.parent.parent
dockerfiles_dir = Path(src_dir, "tests", "docker", "dockerfiles")

lcitool_path = Path(self_dir, "libvirt-ci", "lcitool")

lcitool_cmd = [lcitool_path, "--data-dir", self_dir]

def atomic_write(filename, content):
   tmp = filename.with_suffix(filename.suffix + ".tmp")
   try:
      with tmp.open("w") as fp:
         print(content, file=fp, end="")
         tmp.rename(filename)
   except Exception as ex:
      tmp.unlink()
      raise

def generate(filename, cmd, trailer):
   print("Generate %s" % filename)
   lcitool=subprocess.run(cmd, capture_output=True)

   if lcitool.returncode != 0:
      raise Exception("Failed to generate %s: %s" % (filename, lcitool.stderr))

   content = lcitool.stdout.decode("utf8")
   if trailer is not None:
      content += trailer
   atomic_write(filename, content)

def generate_dockerfile(host, target, cross=None, trailer=None):
   filename = Path(src_dir, "tests", "docker", "dockerfiles", host + ".docker")
   cmd = lcitool_cmd + ["dockerfile"]
   if cross is not None:
      cmd.extend(["--cross", cross])
   cmd.extend([target, "qemu"])
   generate(filename, cmd, trailer)

def generate_cirrus(target, trailer=None):
   filename = Path(src_dir, ".gitlab-ci.d", "cirrus", target + ".vars")
   cmd = lcitool_cmd + ["variables", target, "qemu"]
   generate(filename, cmd, trailer)

ubuntu1804_skipssh = [
   "# https://bugs.launchpad.net/qemu/+bug/1838763\n",
   "ENV QEMU_CONFIGURE_OPTS --disable-libssh\n"
]

ubuntu2004_tsanhack = [
   "# Apply patch https://reviews.llvm.org/D75820\n",
   "# This is required for TSan in clang-10 to compile with QEMU.\n",
   "RUN sed -i 's/^const/static const/g' /usr/lib/llvm-10/lib/clang/10.0.0/include/sanitizer/tsan_interface.h\n"
]

def debian_cross_build(prefix, targets):
   conf = "ENV QEMU_CONFIGURE_OPTS --cross-prefix=%s\n" % (prefix)
   targets = "ENV DEF_TARGET_LIST %s\n" % (targets)
   return "".join([conf, targets])


try:
   generate_dockerfile("centos8", "centos-stream-8")
   generate_dockerfile("fedora", "fedora-35")
   generate_dockerfile("ubuntu1804", "ubuntu-1804",
                       trailer="".join(ubuntu1804_skipssh))
   generate_dockerfile("ubuntu2004", "ubuntu-2004",
                       trailer="".join(ubuntu2004_tsanhack))
   generate_dockerfile("opensuse-leap", "opensuse-leap-152")
   generate_dockerfile("alpine", "alpine-edge")

   generate_dockerfile("debian-arm64-cross", "debian-11",
                       cross="aarch64",
                       trailer=debian_cross_build("aarch64-linux-gnu-",
                                                  "aarch64-softmmu,aarch64-linux-user"))

   generate_dockerfile("debian-s390x-cross", "debian-11",
                       cross="s390x",
                       trailer=debian_cross_build("s390x-linux-gnu-",
                                                  "s390x-softmmu,s390x-linux-user"))

   generate_cirrus("freebsd-12")
   generate_cirrus("freebsd-13")
   generate_cirrus("macos-11")

   sys.exit(0)
except Exception as ex:
   print(str(ex), file=sys.stderr)
   sys.exit(1)
